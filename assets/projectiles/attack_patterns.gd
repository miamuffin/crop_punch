extends Node2D

var generator
@onready var knives_delay = $knives_delay
@onready var fruit_timer = $fruit_timer
@onready var firewall_timer = $firewall_timer
@onready var fireburst_timer = $fireburst_timer
@onready var between_attacks = $between_attacks
@onready var stage_timer = $stage_timer
@onready var passive_score_timer = $PassiveScore_timer

var difficulty = 1

var stage = 1

var scoreInscrease = 10

var firewall_speed = 0
var small_projectile_speed = 0
var knives_speed = 0

var tutorial
var game

# Called when the node enters the scene tree for the first time.
func _ready():
	generator = get_parent()
	game = get_parent().get_parent().get_parent()
	tutorial = get_parent().get_parent().get_parent().find_child("tutorial")
	
func start_game():
	stage_setter(1)
	SoundPlayer.play_music(SoundPlayer.song)
	await get_tree().create_timer(1, false).timeout
	fruits3(1)
	

func start_tutorial():
	SoundPlayer.play_music(SoundPlayer.chill_song)
	tutorial.visible = true
	tutorial.play("move")
	await get_tree().create_timer(6, false).timeout
	tutorial.visible = false
	tut_knives()
	await(tutel)
	tutorial.visible = true
	tutorial.play("left")
	await get_tree().create_timer(6, false).timeout
	tutorial.visible = false
	tut_fruits()
	await(tutel)
	tutorial.visible = true
	tutorial.play("right")
	await get_tree().create_timer(6, false).timeout
	tutorial.visible = false
	tut_fire()
	await(tutel)
	await get_tree().create_timer(2, false).timeout
	Trans.play_in_trans()
	await(Trans.in_ended)
	game.reset_game()
	SoundPlayer.stop_music()
	Trans.play_out_trans()
	
func stage_setter(what_stage):
	stage = what_stage
	
	match stage:
		0:
			knives_delay.wait_time = 0.35
			fruit_timer.wait_time = 0.8
			firewall_timer.wait_time = 0.8
			fireburst_timer.wait_time = 0.15
			between_attacks.wait_time = 0.3
			Global.firewall_spd = 170
			Global.small_projectile_spd = 125
			Global.knives_spd = 125
			stage_timer.start(30)
			if difficulty == 0:
				passive_score_timer.wait_time = 0.9
			else:
				passive_score_timer.wait_time = 0.8
		1:
			knives_delay.wait_time = 0.3
			fruit_timer.wait_time = 0.65
			fireburst_timer.wait_time = 0.14
			firewall_timer.wait_time = 0.6
			between_attacks.wait_time = 0.2
			Global.firewall_spd = 200
			Global.small_projectile_spd = 150
			Global.knives_spd = 150
			stage_timer.start(30)
			if difficulty == 0:
				passive_score_timer.wait_time = 0.8
			else:
				passive_score_timer.wait_time = 0.6
		2:
			knives_delay.wait_time = 0.25
			fruit_timer.wait_time = 0.55
			fireburst_timer.wait_time = 0.1
			firewall_timer.wait_time = 0.5
			between_attacks.wait_time = 0.1
			Global.firewall_spd = 220
			Global.small_projectile_spd = 180
			Global.knives_spd = 180
			stage_timer.start(90)
			if difficulty == 0:
				passive_score_timer.wait_time = 0.7
			else:
				passive_score_timer.wait_time = 0.4
		3:
			knives_delay.wait_time = 0.22
			fruit_timer.wait_time = 0.5
			fireburst_timer.wait_time = 0.1
			firewall_timer.wait_time = 0.45
			between_attacks.wait_time = 0.08
			Global.firewall_spd = 235
			Global.small_projectile_spd = 190
			Global.knives_spd = 190
			stage_timer.start(200)
			if difficulty == 0:
				passive_score_timer.wait_time = 0.5
			else:
				passive_score_timer.wait_time = 0.2
	print(stage)
	
func launch_random_attack():
	var rand_atk = randi()% 14
	match rand_atk:
		0:
			knives1(difficulty)
		1:
			knives2(difficulty)
		2:
			knives3(difficulty)
		3:
			knives4(difficulty)
		4:
			knives5(difficulty)
		5:
			knives6(difficulty)
		6:
			knives7(difficulty)
		7:
			fruits1(difficulty)
		8:
			fruits2(difficulty)
		9:
			fruits3(difficulty)
		10:
			firewalls1(difficulty)
		11:
			firewalls2(difficulty)
		12:
			if stage > 2:
				firewalls3(difficulty)
			else:
				launch_random_attack()
		13:
			if stage > 2:
				firewalls4(difficulty)
			else:
				launch_random_attack()

signal new_row
signal attack_finished
signal new_fruit
signal new_fire
signal tutel

func tut_fruits():
	generator.spawn_fruit(250)
	fruit_timer.start()
	await(new_fruit)
	fruit_timer.start()
	await(new_fruit)
	generator.spawn_fruit(250)
	fruit_timer.start()
	await(new_fruit)
	fruit_timer.start()
	await(new_fruit)
	generator.spawn_fruit(250)
	fruit_timer.start()
	await(new_fruit)
	fruit_timer.start()
	await(new_fruit)
	generator.spawn_fruit(250)
	fruit_timer.start()
	await(new_fruit)
	fruit_timer.start()
	await(new_fruit)
	generator.spawn_fruit(250)
	fruit_timer.start()
	await(new_fruit)
	fruit_timer.start()
	await(new_fruit)
	generator.spawn_fruit(randf_range(160, 320))
	fruit_timer.start()
	await(new_fruit)
	fruit_timer.start()
	await(new_fruit)
	generator.spawn_fruit(randf_range(160, 320))
	fruit_timer.start()
	await(new_fruit)
	fruit_timer.start()
	await(new_fruit)
	generator.spawn_fruit(randf_range(160, 320))
	fruit_timer.start()
	await(new_fruit)
	fruit_timer.start()
	await(new_fruit)
	generator.spawn_fruit(randf_range(160, 320))
	fruit_timer.start()
	await(new_fruit)
	fruit_timer.start()
	await(new_fruit)
	generator.spawn_fruit(randf_range(160, 320))
	fruit_timer.start()
	await(new_fruit)
	
	emit_signal("tutel")
	
func tut_fire():
	firewall()
	firewall_timer.start()
	await(new_fire)
	firewall_timer.start()
	await(new_fire)
	firewall()
	firewall_timer.start()
	await(new_fire)
	firewall_timer.start()
	await(new_fire)
	firewall()
	firewall_timer.start()
	await(new_fire)
	firewall_timer.start()
	await(new_fire)
	firewall()
	firewall_timer.start()
	await(new_fire)
	firewall_timer.start()
	await(new_fire)
	firewall()
	firewall_timer.start()
	await(new_fire)
	firewall_timer.start()
	await(new_fire)
	firewall()
	firewall_timer.start()
	await(new_fire)
	firewall_timer.start()
	await(new_fire)
	firewall()
	firewall_timer.start()
	await(new_fire)
	firewall_timer.start()
	await(new_fire)
	
	emit_signal("tutel")
	
func tut_knives():
	row_of_knives(2, 5)
	knives_delay.start()
	await(new_row)
	row_of_knives(2, 5)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	row_of_knives(1, 4)
	knives_delay.start()
	await(new_row)
	row_of_knives(1, 4)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	row_of_knives(4, 5)
	knives_delay.start()
	await(new_row)
	row_of_knives(4, 5)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	generator.spawn_knives(randf_range(160, 320))
	generator.spawn_knives(randf_range(160, 320))
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	generator.spawn_knives(randf_range(160, 320))
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	generator.spawn_knives(randf_range(160, 320))
	generator.spawn_knives(randf_range(160, 320))
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	generator.spawn_knives(randf_range(160, 320))
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	generator.spawn_knives(randf_range(160, 320))
	generator.spawn_knives(randf_range(160, 320))
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	row_of_knives(1, 2)
	knives_delay.start()
	await(new_row)
	row_of_knives(1, 2)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	row_of_knives(5, 6)
	knives_delay.start()
	await(new_row)
	row_of_knives(5, 6)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	knives_delay.start()
	await(new_row)
	row_of_knives(3, 4)
	knives_delay.start()
	await(new_row)
	
	emit_signal("tutel")

func knives1(diff):
	knives_delay.start()
	await(new_row)
	
	if diff == 0:
		row_of_knives(4, 6)
		knives_delay.start()
		await(new_row)
		row_of_knives(4, 6)
		knives_delay.start()
		await(new_row)
		
		knives_delay.start()
		await(new_row)
			
		generator.spawn_fruit(320)
		knives_delay.start()
		await(new_row)
		knives_delay.start()
		await(new_row)
		
		row_of_knives(1, 2)
		knives_delay.start()
		await(new_row)
		row_of_knives(1, 2)
		knives_delay.start()
		await(new_row)
		
		knives_delay.start()
		await(new_row)
		knives_delay.start()
		await(new_row)
		knives_delay.start()
		await(new_row)
		
		row_of_knives(3, 4)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(250)
		row_of_knives(3, 4)
		knives_delay.start()
		await(new_row)
	else:
		row_of_knives(4, 5)
		knives_delay.start()
		await(new_row)
		row_of_knives(5, 5)
		knives_delay.start()
		await(new_row)
		
		firewall()
		row_of_knives(2, 5)
		knives_delay.start()
		await(new_row)
			
		row_of_knives(2, 5)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(300)
		row_of_knives(2, 5)
		knives_delay.start()
		await(new_row)
		
		
		row_of_knives(2, 3)
		knives_delay.start()
		await(new_row)
		row_of_knives(2, 2)
		knives_delay.start()
		await(new_row)
		firewall()
		row_of_knives(2, 5)
		knives_delay.start()
		await(new_row)
		row_of_knives(2, 5)
		generator.spawn_fruit(300)
		knives_delay.start()
		await(new_row)
		row_of_knives(3, 4)
		knives_delay.start()
		await(new_row)
		
		row_of_knives(3, 4)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(268)
		row_of_knives(4, 4)
		knives_delay.start()
		await(new_row)
	
	emit_signal("attack_finished")
			
func knives2(diff):
	knives_delay.start()
	await(new_row)
	
	if diff == 0:
		row_of_knives(4, 6)
		knives_delay.start()
		await(new_row)
		
		row_of_knives(4, 6)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(320)
		knives_delay.start()
		await(new_row)
		knives_delay.start()
		await(new_row)
		
		row_of_knives(0, 3)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(180)

		knives_delay.start()
		await(new_row)
		knives_delay.start()
		await(new_row)
		row_of_knives(4, 6)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(320)
		knives_delay.start()
		await(new_row)
		knives_delay.start()
		await(new_row)
		
		row_of_knives(0, 3)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(180)
		knives_delay.start()
		await(new_row)
		knives_delay.start()
		await(new_row)
		
		row_of_knives(4, 6)
		knives_delay.start()
		await(new_row)
	else:
		row_of_knives(5, 6)
		knives_delay.start()
		await(new_row)
		
		row_of_knives(4, 6)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(320)
		knives_delay.start()
		await(new_row)
		
		row_of_knives(0, 4)
		knives_delay.start()
		await(new_row)
		row_of_knives(0, 3)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(180)
		row_of_knives(0, 4)
		knives_delay.start()
		await(new_row)

		knives_delay.start()
		await(new_row)
		row_of_knives(4, 6)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(320)
		knives_delay.start()
		await(new_row)
		knives_delay.start()
		await(new_row)
		
		row_of_knives(0, 2)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(180)
		knives_delay.start()
		await(new_row)
		knives_delay.start()
		await(new_row)
		
		row_of_knives(5, 6)
		knives_delay.start()
		await(new_row)
		firewall()
		knives_delay.start()
		await(new_row)
	
	emit_signal("attack_finished")
		
func knives3(diff):
	knives_delay.start()
	await(new_row)
	
	row_of_knives(3, 4)
	knives_delay.start()
	await(new_row)
	generator.spawn_fruit(250)
	row_of_knives(3, 4)
	knives_delay.start()
	await(new_row)
	if diff == 0:
		row_of_knives(2, 4)
		knives_delay.start()
		await(new_row)
		row_of_knives(1, 4)
		knives_delay.start()
		await(new_row)
		row_of_knives(0, 3)
		knives_delay.start()
		await(new_row)
	else:
		row_of_knives(2, 4)
		knives_delay.start()
		await(new_row)
		row_of_knives(1, 3)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(180)
		row_of_knives(0, 2)
		knives_delay.start()
		await(new_row)

	row_of_knives(0, 2)
	knives_delay.start()
	await(new_row)
	if diff == 0:
		row_of_knives(0, 3)
		knives_delay.start()
		await(new_row)
		row_of_knives(1, 4)
		knives_delay.start()
		await(new_row)
		row_of_knives(2, 5)
		knives_delay.start()
		await(new_row)
		row_of_knives(3, 6)
		knives_delay.start()
		await(new_row)
		row_of_knives(4, 6)
		knives_delay.start()
		await(new_row)
	else:
		firewall()
		row_of_knives(1, 3)
		knives_delay.start()
		await(new_row)
		row_of_knives(2, 4)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(250)
		row_of_knives(3, 5)
		knives_delay.start()
		await(new_row)
		row_of_knives(4, 6)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(320)
		row_of_knives(5, 6)
		knives_delay.start()
		await(new_row)
	row_of_knives(5, 6)
	knives_delay.start()
	await(new_row)
	if diff == 0:
		row_of_knives(4, 6)
		knives_delay.start()
		await(new_row)
		row_of_knives(3, 6)
		knives_delay.start()
		await(new_row)
		row_of_knives(3, 5)
		knives_delay.start()
		await(new_row)
	else:
		firewall()
		row_of_knives(4, 6)
		knives_delay.start()
		await(new_row)
		row_of_knives(3, 5)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(250)
		row_of_knives(3, 4)
		knives_delay.start()
		await(new_row)
	row_of_knives(3, 4)
	knives_delay.start()
	await(new_row)
	firewall()
	knives_delay.start()
	await(new_row)
	
	emit_signal("attack_finished")
		
func knives4(diff):
	knives_delay.start()
	await(new_row)
	
	if diff == 0:
		row_of_knives(1, 3)
		knives_delay.start()
		await(new_row)
		row_of_knives(1, 3)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(195)
		row_of_knives(1, 3)
		knives_delay.start()
		await(new_row)
		row_of_knives(1, 3)
		knives_delay.start()
		await(new_row)
		knives_delay.start()
		await(new_row)
		knives_delay.start()
		await(new_row)
		firewall()
		knives_delay.start()
		await(new_row)
		knives_delay.start()
		await(new_row)
		row_of_knives(4, 6)
		knives_delay.start()
		await(new_row)
		row_of_knives(4, 6)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(305)
		row_of_knives(4, 6)
		knives_delay.start()
		await(new_row)
		row_of_knives(4, 6)
		knives_delay.start()
		await(new_row)
		knives_delay.start()
		await(new_row)
		knives_delay.start()
		await(new_row)
		firewall()
	else:
		generator.spawn_fruit(195)
		row_of_knives(2, 2)
		knives_delay.start()
		await(new_row)
		row_of_knives(2, 2)
		knives_delay.start()
		await(new_row)
		firewall()
		row_of_knives(2, 2)
		knives_delay.start()
		await(new_row)
		row_of_knives(2, 2)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(195)
		row_of_knives(2, 5)
		knives_delay.start()
		await(new_row)
		row_of_knives(2, 5)
		knives_delay.start()
		await(new_row)
		firewall()
		row_of_knives(2, 5)
		knives_delay.start()
		await(new_row)
		row_of_knives(2, 5)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(305)
		row_of_knives(5, 5)
		knives_delay.start()
		await(new_row)
		row_of_knives(5, 5)
		knives_delay.start()
		await(new_row)
		firewall()
		row_of_knives(5, 5)
		knives_delay.start()
		await(new_row)
		row_of_knives(5, 5)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(305)
		knives_delay.start()
		await(new_row)
	
	emit_signal("attack_finished")
		
func knives5(diff):
	knives_delay.start()
	await(new_row)
	
	if diff == 0:
		row_of_knives(4, 5)
		knives_delay.start()
		await(new_row)
		row_of_knives(4, 5)
		knives_delay.start()
		await(new_row)
		row_of_knives(3, 5)
		knives_delay.start()
		await(new_row)
		row_of_knives(3, 5)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(250)
		row_of_knives(3, 4)
		knives_delay.start()
		await(new_row)
		row_of_knives(3, 4)
		knives_delay.start()
		await(new_row)
		row_of_knives(2, 4)
		knives_delay.start()
		await(new_row)
		row_of_knives(2, 4)
		knives_delay.start()
		await(new_row)
		row_of_knives(2, 3)
		knives_delay.start()
		await(new_row)
		row_of_knives(2, 3)
		knives_delay.start()
		await(new_row)
	else:
		row_of_knives(5, 5)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(304)
		row_of_knives(5, 5)
		knives_delay.start()
		await(new_row)
		row_of_knives(4, 5)
		knives_delay.start()
		await(new_row)
		firewall()
		row_of_knives(4, 5)
		knives_delay.start()
		await(new_row)
		row_of_knives(4, 4)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(268)
		row_of_knives(4, 4)
		knives_delay.start()
		await(new_row)
		row_of_knives(3, 4)
		knives_delay.start()
		await(new_row)
		firewall()
		row_of_knives(3, 4)
		knives_delay.start()
		await(new_row)
		row_of_knives(3, 3)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(232)
		row_of_knives(3, 3)
		knives_delay.start()
		await(new_row)
		row_of_knives(2, 3)
		knives_delay.start()
		await(new_row)
		firewall()
		row_of_knives(2, 3)
		knives_delay.start()
		await(new_row)
		row_of_knives(2, 2)
		knives_delay.start()
		await(new_row)
		generator.spawn_fruit(196)
		row_of_knives(2, 2)
		knives_delay.start()
		await(new_row)
		row_of_knives(2, 2)
		knives_delay.start()
		await(new_row)
		firewall()
		knives_delay.start()
		await(new_row)
	
	emit_signal("attack_finished")

func knives6(diff):
	knives_delay.start()
	await(new_row)
	
	if diff == 0:
		generator.spawn_knives(160)
		generator.spawn_knives(196)
		generator.spawn_knives(232)
		generator.spawn_knives(340)
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_fruit(250)
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_knives(160)
		generator.spawn_knives(268)
		generator.spawn_knives(304)
		generator.spawn_knives(340)
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_fruit(250)
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_knives(160)
		generator.spawn_knives(196)
		generator.spawn_knives(304)
		generator.spawn_knives(340)
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_fruit(250)
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_knives(232)
		generator.spawn_knives(268)
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_fruit(250)
	else:
		generator.spawn_knives(160)
		generator.spawn_knives(196)
		generator.spawn_knives(232)
		generator.spawn_knives(268)
		generator.spawn_knives(340)
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_knives(160)
		generator.spawn_knives(196)
		generator.spawn_fruit(250)
		generator.spawn_knives(304)
		generator.spawn_knives(340)
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_knives(160)
		generator.spawn_knives(232)
		generator.spawn_knives(268)
		generator.spawn_knives(304)
		generator.spawn_knives(340)
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_knives(160)
		generator.spawn_knives(196)
		generator.spawn_fruit(250)
		generator.spawn_knives(304)
		generator.spawn_knives(340)
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_knives(160)
		generator.spawn_knives(196)
		generator.spawn_knives(232)
		generator.spawn_knives(304)
		generator.spawn_knives(340)
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_knives(160)
		generator.spawn_knives(196)
		generator.spawn_knives(268)
		generator.spawn_knives(304)
		generator.spawn_knives(340)
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_knives(232)
		generator.spawn_knives(268)
		generator.spawn_fruit(322)
		generator.spawn_fruit(178)
		fruit_timer.start()
		await(new_fruit)
	
	emit_signal("attack_finished")
		
func knives7(diff):
	knives_delay.start()
	await(new_row)
	
	if diff == 0:
		row_of_knives(2, 5)
		knives_delay.start()
		await(new_row)
	else:
		row_of_knives(3, 4)
		knives_delay.start()
		await(new_row)
		firewall()
	row_of_knives(2, 5)
	knives_delay.start()
	await(new_row)
	if diff == 1:
		generator.spawn_fruit(300)
	row_of_knives(2, 5)
	knives_delay.start()
	await(new_row)
	firewall()
	row_of_knives(2, 5)
	knives_delay.start()
	await(new_row)
	if diff == 1:
		generator.spawn_fruit(196)
	row_of_knives(2, 5)
	knives_delay.start()
	await(new_row)
	if diff == 0:
		row_of_knives(2, 5)
		knives_delay.start()
		await(new_row)
	else:
		firewall()
		row_of_knives(3, 4)
		knives_delay.start()
		await(new_row)
		
	emit_signal("attack_finished")
	
func fruits1(diff):
	fruit_timer.start()
	await(new_fruit)
	
	# generator.spawn_knives(160)
	# generator.spawn_knives(196)
	# generator.spawn_knives(232)
	# generator.spawn_knives(268)
	# generator.spawn_knives(304)
	# generator.spawn_knives(340)
	if diff == 0:
		generator.spawn_fruit(randf_range(160, 320))
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_knives(randf_range(160, 320))
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_fruit(randf_range(160, 320))
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_knives(randf_range(160, 320))
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_fruit(randf_range(160, 320))
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_knives(randf_range(160, 320))
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_fruit(randf_range(160, 320))
		fruit_timer.start()
		await(new_fruit)
	else:
		generator.spawn_fruit(randf_range(160, 320))
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_knives(160)
		generator.spawn_knives(268)
		generator.spawn_knives(340)
		generator.spawn_knives(196)
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_fruit(randf_range(160, 320))
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_knives(304)
		generator.spawn_knives(268)
		generator.spawn_knives(232)
		generator.spawn_knives(196)
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_fruit(randf_range(160, 320))
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_knives(160)
		generator.spawn_knives(232)
		generator.spawn_knives(340)
		generator.spawn_knives(304)
		fruit_timer.start()
		await(new_fruit)
		generator.spawn_fruit(randf_range(160, 320))
		fruit_timer.start()
		await(new_fruit)
	
	emit_signal("attack_finished")
	
func fruits2(diff):
	fruit_timer.start()
	await(new_fruit)
	if diff == 0:
		row_of_firewalls(2,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		generator.spawn_fruit(320)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,6)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		generator.spawn_fruit(180)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,6)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		generator.spawn_fruit(320)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,6)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		generator.spawn_fruit(180)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
	else:
		row_of_firewalls(1,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,6)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(6,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(6,7)
		fireburst_timer.start()
		await(new_fire)
		generator.spawn_fruit(330)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,6)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,2)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,2)
		fireburst_timer.start()
		await(new_fire)
		generator.spawn_fruit(180)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,6)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(6,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(6,7)
		fireburst_timer.start()
		await(new_fire)
		generator.spawn_fruit(330)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,6)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,2)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,2)
		fireburst_timer.start()
		await(new_fire)
		generator.spawn_fruit(180)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,6)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,7)
		fireburst_timer.start()
		await(new_fire)
		
	
	emit_signal("attack_finished")
	
func fruits3(diff):
	fruit_timer.start()
	await(new_fruit)
	
	generator.spawn_fruit(randf_range(160, 320))
	fruit_timer.start()
	await(new_fruit)
	generator.spawn_fruit(randf_range(160, 320))
	fruit_timer.start()
	await(new_fruit)
	generator.spawn_fruit(randf_range(160, 320))
	fruit_timer.start()
	await(new_fruit)
	generator.spawn_fruit(randf_range(160, 320))
	fruit_timer.start()
	await(new_fruit)
	generator.spawn_fruit(randf_range(160, 320))
	fruit_timer.start()
	await(new_fruit)
	generator.spawn_fruit(randf_range(160, 320))
	fruit_timer.start()
	await(new_fruit)
	
	emit_signal("attack_finished")
	
func firewalls1(diff):
	firewall_timer.start()
	await(new_fire)
	
	# generator.spawn_knives(160)
	# generator.spawn_knives(196)
	# generator.spawn_knives(232)
	# generator.spawn_knives(268)
	# generator.spawn_knives(304)
	# generator.spawn_knives(340)
	
	firewall()
	firewall_timer.start()
	await(new_fire)
	generator.spawn_fruit(randf_range(160, 320))
	if diff == 1:
		firewall()
	firewall_timer.start()
	await(new_fire)
	firewall()
	firewall_timer.start()
	await(new_fire)
	if diff == 1:
		generator.spawn_fruit(randf_range(160, 320))
		firewall()
	firewall_timer.start()
	await(new_fire)
	
	firewall()
	firewall_timer.start()
	await(new_fire)
	generator.spawn_fruit(randf_range(160, 320))
	if diff == 1:
		firewall()
	firewall_timer.start()
	await(new_fire)
	
	firewall()
	firewall_timer.start()
	await(new_fire)
	if diff == 1:
		generator.spawn_fruit(randf_range(160, 320))
		firewall()
	firewall_timer.start()
	await(new_fire)
	
	emit_signal("attack_finished")

func firewalls2(diff):
	firewall_timer.start()
	await(new_fire)
	
	if diff == 0:
		generator.spawn_fruit(250)
		row_of_knives(2, 5)
		firewall_timer.start()
		await(new_fire)
		
		firewall()
		firewall_timer.start()
		await(new_fire)
		row_of_knives(2, 5)
		firewall_timer.start()
		await(new_fire)
		
		firewall()
		firewall_timer.start()
		await(new_fire)
		row_of_knives(3, 6)
		firewall_timer.start()
		await(new_fire)
		
		firewall()
		firewall_timer.start()
		await(new_fire)
		row_of_knives(2, 5)
		firewall_timer.start()
		await(new_fire)
		
		firewall()
		firewall_timer.start()
		await(new_fire)
		row_of_knives(2, 5)
		firewall_timer.start()
		await(new_fire)
		
		firewall()
		firewall_timer.start()
		await(new_fire)
		generator.spawn_fruit(250)
		row_of_knives(3, 4)
		firewall_timer.start()
		await(new_fire)
	else:
		generator.spawn_fruit(250)
		row_of_knives(2, 5)
		firewall_timer.start()
		await(new_fire)
		
		firewall()
		firewall_timer.start()
		await(new_fire)
		generator.spawn_fruit(250)
		row_of_knives(3, 4)
		firewall_timer.start()
		await(new_fire)
		
		firewall()
		firewall_timer.start()
		await(new_fire)
		generator.spawn_fruit(280)
		row_of_knives(4, 5)
		firewall_timer.start()
		await(new_fire)
		
		firewall()
		firewall_timer.start()
		await(new_fire)
		generator.spawn_fruit(220)
		row_of_knives(2, 3)
		firewall_timer.start()
		await(new_fire)
		
		firewall()
		firewall_timer.start()
		await(new_fire)
		generator.spawn_fruit(250)
		row_of_knives(2, 5)
		firewall_timer.start()
		await(new_fire)
		
		firewall()
		firewall_timer.start()
		await(new_fire)
		generator.spawn_fruit(240)
		generator.spawn_fruit(260)
		row_of_knives(3, 4)
		firewall_timer.start()
		await(new_fire)
	
	emit_signal("attack_finished")

func firewalls3(diff):
	firewall_timer.start()
	await(new_fire)
	
	if diff == 0:
		row_of_firewalls(0,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		firewall()
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,6)
		fireburst_timer.start()
		await(new_fire)
		
		row_of_firewalls(2,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		firewall()
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,7)
		fireburst_timer.start()
		await(new_fire)
		
		row_of_firewalls(0,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		firewall()
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,6)
		fireburst_timer.start()
		await(new_fire)
		
		row_of_firewalls(2,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		firewall()
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,7)
		fireburst_timer.start()
		await(new_fire)
		
	else:
		firewall()
		firewall_timer.start()
		await(new_fire)
		
		row_of_firewalls(0,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		generator.spawn_fruit(165)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,2)
		fireburst_timer.start()
		await(new_fire)
		
		row_of_firewalls(6,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		generator.spawn_fruit(335)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(6,7)
		fireburst_timer.start()
		await(new_fire)
		
		row_of_firewalls(0,2)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		generator.spawn_fruit(165)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(0,2)
		fireburst_timer.start()
		await(new_fire)
		
		row_of_firewalls(6,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		generator.spawn_fruit(335)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,7)
		firewall_timer.start()
		await(new_fire)
		firewall()
		firewall_timer.start()
		await(new_fire)
	
	emit_signal("attack_finished")

func firewalls4(diff):
	firewall_timer.start()
	await(new_fire)
	
	if diff == 0:
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		firewall()
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		firewall()
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		firewall()
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		firewall()
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
	else:
		row_of_firewalls(3,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,6)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,6)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(5,7)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,6)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,6)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,3)
		fireburst_timer.start()
		await(new_fire)
		firewall()
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,5)
		fireburst_timer.start()
		await(new_fire)
		firewall()
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,3)
		fireburst_timer.start()
		await(new_fire)
		firewall()
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(4,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(3,5)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(2,4)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
		row_of_firewalls(1,3)
		fireburst_timer.start()
		await(new_fire)
	
	emit_signal("attack_finished")
	

func row_of_knives(from, until):
	var count = 1
	var posx = 160
	while count <= 6:
		if count >= from and count <= until:
			pass
		else:
			generator.spawn_knives(posx)
		posx += 36
		count += 1

func firewall():
	var posx = 155
	var count = 1
	while count <= 7:
		generator.spawn_firewall(posx)
		posx += 32
		count += 1
	
func row_of_firewalls(from, until):
	var posx = 155
	var count = 1
	while count <= 7:
		if count >= from and count <= until:
			pass
		else:
			generator.spawn_firewall(posx)
		posx += 32
		count += 1
	
func _on_knives_delay_timeout():
	emit_signal("new_row")

func _on_fruit_timer_timeout():
	emit_signal("new_fruit")

func _on_firewall_timer_timeout():
	emit_signal("new_fire")

func _on_fireburst_timer_timeout():
	emit_signal("new_fire")


func _on_attack_finished():
	between_attacks.start()


func _on_between_attacks_timeout():
	launch_random_attack()


func _on_stage_timer_timeout():
	print("we here")
	await(attack_finished)
	var next_stg = stage + 1
	stage_setter(next_stg)


func _on_passive_score_timer_timeout():
	#Global.score += scoreInscrease
	pass
